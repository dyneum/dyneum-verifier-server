const { auth, resolver } = require("@iden3/js-iden3-auth");
const getRawBody = require("raw-body");
const asyncFunction = require("../utils/asyncCatch");
const { KYCAgeCredential } = require("../utils/proofRequest");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
const { calculateBirthdate } = require("../utils");

const authRequests = new Map();

const STATUS = {
  IN_PROGRESS: "IN_PROGRESS",
  ERROR: "ERROR",
  DONE: "DONE",
};

const socketMessage = (fn, status, data) => ({
  fn,
  status,
  data,
});

// controller for polygon signup get QR code
const getSignupPolygonIdQR = (wss) =>
  asyncFunction((req, res) => {
    const sessionId = req.query.sessionId ?? uuidv4();
    console.log("getAuthQr for", sessionId);
    const age = req.query.age;

    wss.emit(
      sessionId,
      socketMessage("getAuthQr", STATUS.IN_PROGRESS, sessionId)
    );

    const uri = `${process.env.HOSTED_SERVER_URL}/auth/?sessionId=${sessionId}`;

    const request = auth.createAuthorizationRequest(
      "Must be born before this year",
      process.env.VERIFIER_DID,
      uri
    );

    request.id = sessionId;
    request.thid = sessionId;

    const credentialSubject = {
      dob: {
        $gte: calculateBirthdate(age),
      },
    };

    const scope = request.body.scope ?? [];
    request.body.scope = [...scope, KYCAgeCredential(credentialSubject)];

    authRequests.set(sessionId, request);

    wss.emit(sessionId, socketMessage("getAuthQr", STATUS.DONE, request));

    return res.status(200).json(request);
  });

// controller for polygon signup callback
const singupPolygonIdQR = (wss) =>
  asyncFunction(async (req, res) => {
    const sessionId = req.query.sessionId;

    // get this session's auth request for verification
    const authRequest = authRequests.get(sessionId);
    console.log(`handleVerification for ${sessionId}`);

    wss.emit(
      sessionId,
      socketMessage("handleVerification", STATUS.IN_PROGRESS, authRequest)
    );

    // get JWZ token params from the post request
    const raw = await getRawBody(req);
    const tokenStr = raw.toString().trim();

    // The CredentialAtomicQuerySigValidator contract is used to verify any credential-related zk proof
    // generated by the user using the credentialAtomicQuerySigV2OnChain circuit.
    // https://0xpolygonid.github.io/tutorials/contracts/overview/#blockchain-addresses
    const mumbaiContractAddress = "0x134B1BE34911E39A8397ec6289782989729807a4";
    const keyDIR = "./keys";

    const ethStateResolver = new resolver.EthStateResolver(
      process.env.RPC_URL_MUMBAI,
      mumbaiContractAddress
    );

    const resolvers = {
      ["polygon:mumbai"]: ethStateResolver,
    };

    const verifier = await auth.Verifier.newVerifier({
      stateResolver: resolvers,
      circuitsDir: path.join(__dirname, keyDIR),
      ipfsGatewayURL: "https://ipfs.io",
    });

    try {
      const opts = {
        AcceptedStateTransitionDelay: 5 * 60 * 1000, // up to a 5 minute delay accepted by the Verifier
      };
      authResponse = await verifier.fullVerify(tokenStr, authRequest, opts);
      const userId = authResponse.from;

      wss.emit(
        sessionId,
        socketMessage("handleVerification", STATUS.DONE, authResponse)
      );

      return res
        .status(200)
        .set("content-type", "application/json")
        .send("User" + userId + "successfully authenticated");
    } catch (error) {
      console.log(error);

      wss.emit(
        sessionId,
        socketMessage("handleVerification", STATUS.ERROR, error)
      );

      return res.status(500).send(error);
    }
  });

module.exports = {
  getSignupPolygonIdQR,
  singupPolygonIdQR,
};
